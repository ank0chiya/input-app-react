from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model import Model
from openapi_server.models.attribute import Attribute
from openapi_server import util

from openapi_server.models.attribute import Attribute  # noqa: E501

class Product(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, product_id=None, prefix=None, type=None, cfg_type=None, attributes=None, sort_order=None):  # noqa: E501
        """Product - a model defined in OpenAPI

        :param product_id: The product_id of this Product.  # noqa: E501
        :type product_id: int
        :param prefix: The prefix of this Product.  # noqa: E501
        :type prefix: str
        :param type: The type of this Product.  # noqa: E501
        :type type: str
        :param cfg_type: The cfg_type of this Product.  # noqa: E501
        :type cfg_type: str
        :param attributes: The attributes of this Product.  # noqa: E501
        :type attributes: List[Attribute]
        :param sort_order: The sort_order of this Product.  # noqa: E501
        :type sort_order: int
        """
        self.openapi_types = {
            'product_id': int,
            'prefix': str,
            'type': str,
            'cfg_type': str,
            'attributes': List[Attribute],
            'sort_order': int
        }

        self.attribute_map = {
            'product_id': 'productId',
            'prefix': 'prefix',
            'type': 'type',
            'cfg_type': 'cfgType',
            'attributes': 'attributes',
            'sort_order': 'sortOrder'
        }

        self._product_id = product_id
        self._prefix = prefix
        self._type = type
        self._cfg_type = cfg_type
        self._attributes = attributes
        self._sort_order = sort_order

    @classmethod
    def from_dict(cls, dikt) -> 'Product':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Product of this Product.  # noqa: E501
        :rtype: Product
        """
        return util.deserialize_model(dikt, cls)

    @property
    def product_id(self) -> int:
        """Gets the product_id of this Product.


        :return: The product_id of this Product.
        :rtype: int
        """
        return self._product_id

    @product_id.setter
    def product_id(self, product_id: int):
        """Sets the product_id of this Product.


        :param product_id: The product_id of this Product.
        :type product_id: int
        """
        if product_id is None:
            raise ValueError("Invalid value for `product_id`, must not be `None`")  # noqa: E501

        self._product_id = product_id

    @property
    def prefix(self) -> str:
        """Gets the prefix of this Product.


        :return: The prefix of this Product.
        :rtype: str
        """
        return self._prefix

    @prefix.setter
    def prefix(self, prefix: str):
        """Sets the prefix of this Product.


        :param prefix: The prefix of this Product.
        :type prefix: str
        """
        if prefix is None:
            raise ValueError("Invalid value for `prefix`, must not be `None`")  # noqa: E501

        self._prefix = prefix

    @property
    def type(self) -> str:
        """Gets the type of this Product.


        :return: The type of this Product.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type: str):
        """Sets the type of this Product.


        :param type: The type of this Product.
        :type type: str
        """
        if type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")  # noqa: E501

        self._type = type

    @property
    def cfg_type(self) -> str:
        """Gets the cfg_type of this Product.


        :return: The cfg_type of this Product.
        :rtype: str
        """
        return self._cfg_type

    @cfg_type.setter
    def cfg_type(self, cfg_type: str):
        """Sets the cfg_type of this Product.


        :param cfg_type: The cfg_type of this Product.
        :type cfg_type: str
        """
        if cfg_type is None:
            raise ValueError("Invalid value for `cfg_type`, must not be `None`")  # noqa: E501

        self._cfg_type = cfg_type

    @property
    def attributes(self) -> List[Attribute]:
        """Gets the attributes of this Product.


        :return: The attributes of this Product.
        :rtype: List[Attribute]
        """
        return self._attributes

    @attributes.setter
    def attributes(self, attributes: List[Attribute]):
        """Sets the attributes of this Product.


        :param attributes: The attributes of this Product.
        :type attributes: List[Attribute]
        """
        if attributes is None:
            raise ValueError("Invalid value for `attributes`, must not be `None`")  # noqa: E501

        self._attributes = attributes

    @property
    def sort_order(self) -> int:
        """Gets the sort_order of this Product.


        :return: The sort_order of this Product.
        :rtype: int
        """
        return self._sort_order

    @sort_order.setter
    def sort_order(self, sort_order: int):
        """Sets the sort_order of this Product.


        :param sort_order: The sort_order of this Product.
        :type sort_order: int
        """
        if sort_order is None:
            raise ValueError("Invalid value for `sort_order`, must not be `None`")  # noqa: E501

        self._sort_order = sort_order
