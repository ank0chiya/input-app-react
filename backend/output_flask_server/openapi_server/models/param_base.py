from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model import Model
from openapi_server import util


class ParamBase(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, param_id=None, sort_order=None):  # noqa: E501
        """ParamBase - a model defined in OpenAPI

        :param param_id: The param_id of this ParamBase.  # noqa: E501
        :type param_id: int
        :param sort_order: The sort_order of this ParamBase.  # noqa: E501
        :type sort_order: int
        """
        self.openapi_types = {
            'param_id': int,
            'sort_order': int
        }

        self.attribute_map = {
            'param_id': 'paramId',
            'sort_order': 'sortOrder'
        }

        self._param_id = param_id
        self._sort_order = sort_order

    @classmethod
    def from_dict(cls, dikt) -> 'ParamBase':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The ParamBase of this ParamBase.  # noqa: E501
        :rtype: ParamBase
        """
        return util.deserialize_model(dikt, cls)

    @property
    def param_id(self) -> int:
        """Gets the param_id of this ParamBase.

        Unique identifier for the parameter.  # noqa: E501

        :return: The param_id of this ParamBase.
        :rtype: int
        """
        return self._param_id

    @param_id.setter
    def param_id(self, param_id: int):
        """Sets the param_id of this ParamBase.

        Unique identifier for the parameter.  # noqa: E501

        :param param_id: The param_id of this ParamBase.
        :type param_id: int
        """
        if param_id is None:
            raise ValueError("Invalid value for `param_id`, must not be `None`")  # noqa: E501

        self._param_id = param_id

    @property
    def sort_order(self) -> int:
        """Gets the sort_order of this ParamBase.


        :return: The sort_order of this ParamBase.
        :rtype: int
        """
        return self._sort_order

    @sort_order.setter
    def sort_order(self, sort_order: int):
        """Sets the sort_order of this ParamBase.


        :param sort_order: The sort_order of this ParamBase.
        :type sort_order: int
        """
        if sort_order is None:
            raise ValueError("Invalid value for `sort_order`, must not be `None`")  # noqa: E501

        self._sort_order = sort_order
