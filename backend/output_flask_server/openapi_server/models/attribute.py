from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model import Model
from openapi_server.models.param_item import ParamItem
from openapi_server import util

from openapi_server.models.param_item import ParamItem  # noqa: E501

class Attribute(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, attribute_id=None, attribute=None, attribute_type=None, attribute_jp=None, attribute_unit=None, params=None, contract=None, public=None, masking=None, online=None, sort_order=None):  # noqa: E501
        """Attribute - a model defined in OpenAPI

        :param attribute_id: The attribute_id of this Attribute.  # noqa: E501
        :type attribute_id: int
        :param attribute: The attribute of this Attribute.  # noqa: E501
        :type attribute: str
        :param attribute_type: The attribute_type of this Attribute.  # noqa: E501
        :type attribute_type: str
        :param attribute_jp: The attribute_jp of this Attribute.  # noqa: E501
        :type attribute_jp: str
        :param attribute_unit: The attribute_unit of this Attribute.  # noqa: E501
        :type attribute_unit: str
        :param params: The params of this Attribute.  # noqa: E501
        :type params: List[ParamItem]
        :param contract: The contract of this Attribute.  # noqa: E501
        :type contract: str
        :param public: The public of this Attribute.  # noqa: E501
        :type public: bool
        :param masking: The masking of this Attribute.  # noqa: E501
        :type masking: bool
        :param online: The online of this Attribute.  # noqa: E501
        :type online: bool
        :param sort_order: The sort_order of this Attribute.  # noqa: E501
        :type sort_order: int
        """
        self.openapi_types = {
            'attribute_id': int,
            'attribute': str,
            'attribute_type': str,
            'attribute_jp': str,
            'attribute_unit': str,
            'params': List[ParamItem],
            'contract': str,
            'public': bool,
            'masking': bool,
            'online': bool,
            'sort_order': int
        }

        self.attribute_map = {
            'attribute_id': 'attributeId',
            'attribute': 'attribute',
            'attribute_type': 'attributeType',
            'attribute_jp': 'attributeJP',
            'attribute_unit': 'attributeUnit',
            'params': 'params',
            'contract': 'contract',
            'public': 'public',
            'masking': 'masking',
            'online': 'online',
            'sort_order': 'sortOrder'
        }

        self._attribute_id = attribute_id
        self._attribute = attribute
        self._attribute_type = attribute_type
        self._attribute_jp = attribute_jp
        self._attribute_unit = attribute_unit
        self._params = params
        self._contract = contract
        self._public = public
        self._masking = masking
        self._online = online
        self._sort_order = sort_order

    @classmethod
    def from_dict(cls, dikt) -> 'Attribute':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Attribute of this Attribute.  # noqa: E501
        :rtype: Attribute
        """
        return util.deserialize_model(dikt, cls)

    @property
    def attribute_id(self) -> int:
        """Gets the attribute_id of this Attribute.


        :return: The attribute_id of this Attribute.
        :rtype: int
        """
        return self._attribute_id

    @attribute_id.setter
    def attribute_id(self, attribute_id: int):
        """Sets the attribute_id of this Attribute.


        :param attribute_id: The attribute_id of this Attribute.
        :type attribute_id: int
        """
        if attribute_id is None:
            raise ValueError("Invalid value for `attribute_id`, must not be `None`")  # noqa: E501

        self._attribute_id = attribute_id

    @property
    def attribute(self) -> str:
        """Gets the attribute of this Attribute.


        :return: The attribute of this Attribute.
        :rtype: str
        """
        return self._attribute

    @attribute.setter
    def attribute(self, attribute: str):
        """Sets the attribute of this Attribute.


        :param attribute: The attribute of this Attribute.
        :type attribute: str
        """
        if attribute is None:
            raise ValueError("Invalid value for `attribute`, must not be `None`")  # noqa: E501

        self._attribute = attribute

    @property
    def attribute_type(self) -> str:
        """Gets the attribute_type of this Attribute.


        :return: The attribute_type of this Attribute.
        :rtype: str
        """
        return self._attribute_type

    @attribute_type.setter
    def attribute_type(self, attribute_type: str):
        """Sets the attribute_type of this Attribute.


        :param attribute_type: The attribute_type of this Attribute.
        :type attribute_type: str
        """
        if attribute_type is None:
            raise ValueError("Invalid value for `attribute_type`, must not be `None`")  # noqa: E501

        self._attribute_type = attribute_type

    @property
    def attribute_jp(self) -> str:
        """Gets the attribute_jp of this Attribute.


        :return: The attribute_jp of this Attribute.
        :rtype: str
        """
        return self._attribute_jp

    @attribute_jp.setter
    def attribute_jp(self, attribute_jp: str):
        """Sets the attribute_jp of this Attribute.


        :param attribute_jp: The attribute_jp of this Attribute.
        :type attribute_jp: str
        """
        if attribute_jp is None:
            raise ValueError("Invalid value for `attribute_jp`, must not be `None`")  # noqa: E501

        self._attribute_jp = attribute_jp

    @property
    def attribute_unit(self) -> str:
        """Gets the attribute_unit of this Attribute.


        :return: The attribute_unit of this Attribute.
        :rtype: str
        """
        return self._attribute_unit

    @attribute_unit.setter
    def attribute_unit(self, attribute_unit: str):
        """Sets the attribute_unit of this Attribute.


        :param attribute_unit: The attribute_unit of this Attribute.
        :type attribute_unit: str
        """
        if attribute_unit is None:
            raise ValueError("Invalid value for `attribute_unit`, must not be `None`")  # noqa: E501

        self._attribute_unit = attribute_unit

    @property
    def params(self) -> List[ParamItem]:
        """Gets the params of this Attribute.

        List of parameters. Managed via /params endpoint. Included in GET, empty on new attribute creation.  # noqa: E501

        :return: The params of this Attribute.
        :rtype: List[ParamItem]
        """
        return self._params

    @params.setter
    def params(self, params: List[ParamItem]):
        """Sets the params of this Attribute.

        List of parameters. Managed via /params endpoint. Included in GET, empty on new attribute creation.  # noqa: E501

        :param params: The params of this Attribute.
        :type params: List[ParamItem]
        """
        if params is None:
            raise ValueError("Invalid value for `params`, must not be `None`")  # noqa: E501

        self._params = params

    @property
    def contract(self) -> str:
        """Gets the contract of this Attribute.


        :return: The contract of this Attribute.
        :rtype: str
        """
        return self._contract

    @contract.setter
    def contract(self, contract: str):
        """Sets the contract of this Attribute.


        :param contract: The contract of this Attribute.
        :type contract: str
        """
        if contract is None:
            raise ValueError("Invalid value for `contract`, must not be `None`")  # noqa: E501

        self._contract = contract

    @property
    def public(self) -> bool:
        """Gets the public of this Attribute.


        :return: The public of this Attribute.
        :rtype: bool
        """
        return self._public

    @public.setter
    def public(self, public: bool):
        """Sets the public of this Attribute.


        :param public: The public of this Attribute.
        :type public: bool
        """
        if public is None:
            raise ValueError("Invalid value for `public`, must not be `None`")  # noqa: E501

        self._public = public

    @property
    def masking(self) -> bool:
        """Gets the masking of this Attribute.


        :return: The masking of this Attribute.
        :rtype: bool
        """
        return self._masking

    @masking.setter
    def masking(self, masking: bool):
        """Sets the masking of this Attribute.


        :param masking: The masking of this Attribute.
        :type masking: bool
        """
        if masking is None:
            raise ValueError("Invalid value for `masking`, must not be `None`")  # noqa: E501

        self._masking = masking

    @property
    def online(self) -> bool:
        """Gets the online of this Attribute.


        :return: The online of this Attribute.
        :rtype: bool
        """
        return self._online

    @online.setter
    def online(self, online: bool):
        """Sets the online of this Attribute.


        :param online: The online of this Attribute.
        :type online: bool
        """
        if online is None:
            raise ValueError("Invalid value for `online`, must not be `None`")  # noqa: E501

        self._online = online

    @property
    def sort_order(self) -> int:
        """Gets the sort_order of this Attribute.


        :return: The sort_order of this Attribute.
        :rtype: int
        """
        return self._sort_order

    @sort_order.setter
    def sort_order(self, sort_order: int):
        """Sets the sort_order of this Attribute.


        :param sort_order: The sort_order of this Attribute.
        :type sort_order: int
        """
        if sort_order is None:
            raise ValueError("Invalid value for `sort_order`, must not be `None`")  # noqa: E501

        self._sort_order = sort_order
