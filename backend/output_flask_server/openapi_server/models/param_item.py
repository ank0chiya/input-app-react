from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model import Model
from openapi_server.models.param_type1_item import ParamType1Item
from openapi_server.models.param_type2_item import ParamType2Item
from openapi_server.models.param_type3_item import ParamType3Item
from openapi_server import util

from openapi_server.models.param_type1_item import ParamType1Item  # noqa: E501
from openapi_server.models.param_type2_item import ParamType2Item  # noqa: E501
from openapi_server.models.param_type3_item import ParamType3Item  # noqa: E501

class ParamItem(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, param_id=None, sort_order=None, type=None, code=None, disp_name=None, min=None, increment=None):  # noqa: E501
        """ParamItem - a model defined in OpenAPI

        :param param_id: The param_id of this ParamItem.  # noqa: E501
        :type param_id: int
        :param sort_order: The sort_order of this ParamItem.  # noqa: E501
        :type sort_order: int
        :param type: The type of this ParamItem.  # noqa: E501
        :type type: str
        :param code: The code of this ParamItem.  # noqa: E501
        :type code: str
        :param disp_name: The disp_name of this ParamItem.  # noqa: E501
        :type disp_name: str
        :param min: The min of this ParamItem.  # noqa: E501
        :type min: int
        :param increment: The increment of this ParamItem.  # noqa: E501
        :type increment: int
        """
        self.openapi_types = {
            'param_id': int,
            'sort_order': int,
            'type': str,
            'code': str,
            'disp_name': str,
            'min': int,
            'increment': int
        }

        self.attribute_map = {
            'param_id': 'param_id',
            'sort_order': 'sort_order',
            'type': 'type',
            'code': 'code',
            'disp_name': 'disp_name',
            'min': 'min',
            'increment': 'increment'
        }

        self._param_id = param_id
        self._sort_order = sort_order
        self._type = type
        self._code = code
        self._disp_name = disp_name
        self._min = min
        self._increment = increment

    @classmethod
    def from_dict(cls, dikt) -> 'ParamItem':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The ParamItem of this ParamItem.  # noqa: E501
        :rtype: ParamItem
        """
        return util.deserialize_model(dikt, cls)

    @property
    def param_id(self) -> int:
        """Gets the param_id of this ParamItem.

        Unique identifier for the parameter.  # noqa: E501

        :return: The param_id of this ParamItem.
        :rtype: int
        """
        return self._param_id

    @param_id.setter
    def param_id(self, param_id: int):
        """Sets the param_id of this ParamItem.

        Unique identifier for the parameter.  # noqa: E501

        :param param_id: The param_id of this ParamItem.
        :type param_id: int
        """
        if param_id is None:
            raise ValueError("Invalid value for `param_id`, must not be `None`")  # noqa: E501

        self._param_id = param_id

    @property
    def sort_order(self) -> int:
        """Gets the sort_order of this ParamItem.


        :return: The sort_order of this ParamItem.
        :rtype: int
        """
        return self._sort_order

    @sort_order.setter
    def sort_order(self, sort_order: int):
        """Sets the sort_order of this ParamItem.


        :param sort_order: The sort_order of this ParamItem.
        :type sort_order: int
        """
        if sort_order is None:
            raise ValueError("Invalid value for `sort_order`, must not be `None`")  # noqa: E501

        self._sort_order = sort_order

    @property
    def type(self) -> str:
        """Gets the type of this ParamItem.


        :return: The type of this ParamItem.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type: str):
        """Sets the type of this ParamItem.


        :param type: The type of this ParamItem.
        :type type: str
        """
        allowed_values = ["type1", "type2", "type3"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def code(self) -> str:
        """Gets the code of this ParamItem.


        :return: The code of this ParamItem.
        :rtype: str
        """
        return self._code

    @code.setter
    def code(self, code: str):
        """Sets the code of this ParamItem.


        :param code: The code of this ParamItem.
        :type code: str
        """
        if code is None:
            raise ValueError("Invalid value for `code`, must not be `None`")  # noqa: E501

        self._code = code

    @property
    def disp_name(self) -> str:
        """Gets the disp_name of this ParamItem.


        :return: The disp_name of this ParamItem.
        :rtype: str
        """
        return self._disp_name

    @disp_name.setter
    def disp_name(self, disp_name: str):
        """Sets the disp_name of this ParamItem.


        :param disp_name: The disp_name of this ParamItem.
        :type disp_name: str
        """
        if disp_name is None:
            raise ValueError("Invalid value for `disp_name`, must not be `None`")  # noqa: E501

        self._disp_name = disp_name

    @property
    def min(self) -> int:
        """Gets the min of this ParamItem.


        :return: The min of this ParamItem.
        :rtype: int
        """
        return self._min

    @min.setter
    def min(self, min: int):
        """Sets the min of this ParamItem.


        :param min: The min of this ParamItem.
        :type min: int
        """
        if min is None:
            raise ValueError("Invalid value for `min`, must not be `None`")  # noqa: E501

        self._min = min

    @property
    def increment(self) -> int:
        """Gets the increment of this ParamItem.


        :return: The increment of this ParamItem.
        :rtype: int
        """
        return self._increment

    @increment.setter
    def increment(self, increment: int):
        """Sets the increment of this ParamItem.


        :param increment: The increment of this ParamItem.
        :type increment: int
        """
        if increment is None:
            raise ValueError("Invalid value for `increment`, must not be `None`")  # noqa: E501

        self._increment = increment
