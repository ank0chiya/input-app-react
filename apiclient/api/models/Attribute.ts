/* tslint:disable */
/* eslint-disable */
/**
 * Sample Product API
 * API for managing products and attributes. Params are managed via dedicated endpoints. Attribute creation/update does not include params list directly. \'param\' field in Attribute renamed to \'params\'. Corrected tags for DELETE methods.
 *
 * The version of the OpenAPI document: v1.2.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { ParamItem } from './ParamItem';
import {
    ParamItemFromJSON,
    ParamItemFromJSONTyped,
    ParamItemToJSON,
    ParamItemToJSONTyped,
} from './ParamItem';

/**
 * 
 * @export
 * @interface Attribute
 */
export interface Attribute {
    /**
     * 
     * @type {number}
     * @memberof Attribute
     */
    readonly attributeId: number;
    /**
     * 
     * @type {string}
     * @memberof Attribute
     */
    attribute: string;
    /**
     * 
     * @type {string}
     * @memberof Attribute
     */
    attributeType: string;
    /**
     * 
     * @type {string}
     * @memberof Attribute
     */
    attributeJP: string;
    /**
     * 
     * @type {string}
     * @memberof Attribute
     */
    attributeUnit: string;
    /**
     * List of parameters. Managed via /params endpoint. Included in GET, empty on new attribute creation.
     * @type {Array<ParamItem>}
     * @memberof Attribute
     */
    params: Array<ParamItem>;
    /**
     * 
     * @type {string}
     * @memberof Attribute
     */
    contract: string;
    /**
     * 
     * @type {boolean}
     * @memberof Attribute
     */
    _public: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof Attribute
     */
    masking: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof Attribute
     */
    online: boolean;
    /**
     * 
     * @type {number}
     * @memberof Attribute
     */
    sortOrder: number;
}

/**
 * Check if a given object implements the Attribute interface.
 */
export function instanceOfAttribute(value: object): value is Attribute {
    if (!('attributeId' in value) || value['attributeId'] === undefined) return false;
    if (!('attribute' in value) || value['attribute'] === undefined) return false;
    if (!('attributeType' in value) || value['attributeType'] === undefined) return false;
    if (!('attributeJP' in value) || value['attributeJP'] === undefined) return false;
    if (!('attributeUnit' in value) || value['attributeUnit'] === undefined) return false;
    if (!('params' in value) || value['params'] === undefined) return false;
    if (!('contract' in value) || value['contract'] === undefined) return false;
    if (!('_public' in value) || value['_public'] === undefined) return false;
    if (!('masking' in value) || value['masking'] === undefined) return false;
    if (!('online' in value) || value['online'] === undefined) return false;
    if (!('sortOrder' in value) || value['sortOrder'] === undefined) return false;
    return true;
}

export function AttributeFromJSON(json: any): Attribute {
    return AttributeFromJSONTyped(json, false);
}

export function AttributeFromJSONTyped(json: any, ignoreDiscriminator: boolean): Attribute {
    if (json == null) {
        return json;
    }
    return {
        
        'attributeId': json['attributeId'],
        'attribute': json['attribute'],
        'attributeType': json['attributeType'],
        'attributeJP': json['attributeJP'],
        'attributeUnit': json['attributeUnit'],
        'params': ((json['params'] as Array<any>).map(ParamItemFromJSON)),
        'contract': json['contract'],
        '_public': json['public'],
        'masking': json['masking'],
        'online': json['online'],
        'sortOrder': json['sortOrder'],
    };
}

export function AttributeToJSON(json: any): Attribute {
    return AttributeToJSONTyped(json, false);
}

export function AttributeToJSONTyped(value?: Omit<Attribute, 'attributeId'> | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'attribute': value['attribute'],
        'attributeType': value['attributeType'],
        'attributeJP': value['attributeJP'],
        'attributeUnit': value['attributeUnit'],
        'params': ((value['params'] as Array<any>).map(ParamItemToJSON)),
        'contract': value['contract'],
        'public': value['_public'],
        'masking': value['masking'],
        'online': value['online'],
        'sortOrder': value['sortOrder'],
    };
}

