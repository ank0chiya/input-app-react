/* tslint:disable */
/* eslint-disable */
/**
 * Sample Product API
 * API for managing products and attributes. Params are managed via dedicated endpoints. Attribute creation/update does not include params list directly. \'param\' field in Attribute renamed to \'params\'. Corrected tags for DELETE methods.
 *
 * The version of the OpenAPI document: v1.2.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


/**
 * @type ParamItem
 * 
 * @export
 */
export type ParamItem = { type: 'type1' } & ParamType1Item | { type: 'type2' } & ParamType2Item | { type: 'type3' } & ParamType3Item;

export function ParamItemFromJSON(json: any): ParamItem {
    return ParamItemFromJSONTyped(json, false);
}

export function ParamItemFromJSONTyped(json: any, ignoreDiscriminator: boolean): ParamItem {
    if (json == null) {
        return json;
    }
    switch (json['type']) {
        case 'type1':
            return Object.assign({}, ParamType1ItemFromJSONTyped(json, true), { type: 'type1' } as const);
        case 'type2':
            return Object.assign({}, ParamType2ItemFromJSONTyped(json, true), { type: 'type2' } as const);
        case 'type3':
            return Object.assign({}, ParamType3ItemFromJSONTyped(json, true), { type: 'type3' } as const);
        default:
            return json;
    }
}

export function ParamItemToJSON(json: any): any {
    return ParamItemToJSONTyped(json, false);
}

export function ParamItemToJSONTyped(value?: ParamItem | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }
    switch (value['type']) {
        case 'type1':
            return Object.assign({}, ParamType1ItemToJSON(value), { type: 'type1' } as const);
        case 'type2':
            return Object.assign({}, ParamType2ItemToJSON(value), { type: 'type2' } as const);
        case 'type3':
            return Object.assign({}, ParamType3ItemToJSON(value), { type: 'type3' } as const);
        default:
            return json;
    }
}

