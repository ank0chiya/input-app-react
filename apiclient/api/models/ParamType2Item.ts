/* tslint:disable */
/* eslint-disable */
/**
 * Sample Product API
 * API for managing products and attributes. Params are managed via dedicated endpoints. Attribute creation/update does not include params list directly. \'param\' field in Attribute renamed to \'params\'. Corrected tags for DELETE methods.
 *
 * The version of the OpenAPI document: v1.2.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface ParamType2Item
 */
export interface ParamType2Item {
    /**
     * Unique identifier for the parameter.
     * @type {number}
     * @memberof ParamType2Item
     */
    readonly paramId: number;
    /**
     * 
     * @type {number}
     * @memberof ParamType2Item
     */
    sortOrder: number;
    /**
     * 
     * @type {string}
     * @memberof ParamType2Item
     */
    type: ParamType2ItemTypeEnum;
    /**
     * 
     * @type {number}
     * @memberof ParamType2Item
     */
    min: number;
    /**
     * 
     * @type {number}
     * @memberof ParamType2Item
     */
    increment: number;
}


/**
 * @export
 */
export const ParamType2ItemTypeEnum = {
    Type2: 'type2'
} as const;
export type ParamType2ItemTypeEnum = typeof ParamType2ItemTypeEnum[keyof typeof ParamType2ItemTypeEnum];


/**
 * Check if a given object implements the ParamType2Item interface.
 */
export function instanceOfParamType2Item(value: object): value is ParamType2Item {
    if (!('paramId' in value) || value['paramId'] === undefined) return false;
    if (!('sortOrder' in value) || value['sortOrder'] === undefined) return false;
    if (!('type' in value) || value['type'] === undefined) return false;
    if (!('min' in value) || value['min'] === undefined) return false;
    if (!('increment' in value) || value['increment'] === undefined) return false;
    return true;
}

export function ParamType2ItemFromJSON(json: any): ParamType2Item {
    return ParamType2ItemFromJSONTyped(json, false);
}

export function ParamType2ItemFromJSONTyped(json: any, ignoreDiscriminator: boolean): ParamType2Item {
    if (json == null) {
        return json;
    }
    return {
        
        'paramId': json['paramId'],
        'sortOrder': json['sortOrder'],
        'type': json['type'],
        'min': json['min'],
        'increment': json['increment'],
    };
}

export function ParamType2ItemToJSON(json: any): ParamType2Item {
    return ParamType2ItemToJSONTyped(json, false);
}

export function ParamType2ItemToJSONTyped(value?: Omit<ParamType2Item, 'paramId'> | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'sortOrder': value['sortOrder'],
        'type': value['type'],
        'min': value['min'],
        'increment': value['increment'],
    };
}

