/* tslint:disable */
/* eslint-disable */
/**
 * Sample Product API
 * API for managing products and attributes. Params are managed via dedicated endpoints. Attribute creation/update does not include params list directly. \'param\' field in Attribute renamed to \'params\'. Corrected tags for DELETE methods.
 *
 * The version of the OpenAPI document: v1.2.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { Attribute } from './Attribute';
import {
    AttributeFromJSON,
    AttributeFromJSONTyped,
    AttributeToJSON,
    AttributeToJSONTyped,
} from './Attribute';

/**
 * 
 * @export
 * @interface Product
 */
export interface Product {
    /**
     * 
     * @type {number}
     * @memberof Product
     */
    readonly productId: number;
    /**
     * 
     * @type {string}
     * @memberof Product
     */
    prefix: string;
    /**
     * 
     * @type {string}
     * @memberof Product
     */
    type: string;
    /**
     * 
     * @type {string}
     * @memberof Product
     */
    cfgType: string;
    /**
     * 
     * @type {Array<Attribute>}
     * @memberof Product
     */
    attributes: Array<Attribute>;
    /**
     * 
     * @type {number}
     * @memberof Product
     */
    sortOrder: number;
}

/**
 * Check if a given object implements the Product interface.
 */
export function instanceOfProduct(value: object): value is Product {
    if (!('productId' in value) || value['productId'] === undefined) return false;
    if (!('prefix' in value) || value['prefix'] === undefined) return false;
    if (!('type' in value) || value['type'] === undefined) return false;
    if (!('cfgType' in value) || value['cfgType'] === undefined) return false;
    if (!('attributes' in value) || value['attributes'] === undefined) return false;
    if (!('sortOrder' in value) || value['sortOrder'] === undefined) return false;
    return true;
}

export function ProductFromJSON(json: any): Product {
    return ProductFromJSONTyped(json, false);
}

export function ProductFromJSONTyped(json: any, ignoreDiscriminator: boolean): Product {
    if (json == null) {
        return json;
    }
    return {
        
        'productId': json['productId'],
        'prefix': json['prefix'],
        'type': json['type'],
        'cfgType': json['cfgType'],
        'attributes': ((json['attributes'] as Array<any>).map(AttributeFromJSON)),
        'sortOrder': json['sortOrder'],
    };
}

export function ProductToJSON(json: any): Product {
    return ProductToJSONTyped(json, false);
}

export function ProductToJSONTyped(value?: Omit<Product, 'productId'> | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'prefix': value['prefix'],
        'type': value['type'],
        'cfgType': value['cfgType'],
        'attributes': ((value['attributes'] as Array<any>).map(AttributeToJSON)),
        'sortOrder': value['sortOrder'],
    };
}

