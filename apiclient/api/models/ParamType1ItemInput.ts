/* tslint:disable */
/* eslint-disable */
/**
 * Sample Product API
 * API for managing products and attributes. Params are managed via dedicated endpoints. Attribute creation/update does not include params list directly. \'param\' field in Attribute renamed to \'params\'. Corrected tags for DELETE methods.
 *
 * The version of the OpenAPI document: v1.2.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface ParamType1ItemInput
 */
export interface ParamType1ItemInput {
    /**
     * 
     * @type {number}
     * @memberof ParamType1ItemInput
     */
    sortOrder: number;
    /**
     * 
     * @type {string}
     * @memberof ParamType1ItemInput
     */
    type: ParamType1ItemInputTypeEnum;
    /**
     * 
     * @type {string}
     * @memberof ParamType1ItemInput
     */
    code: string;
    /**
     * 
     * @type {string}
     * @memberof ParamType1ItemInput
     */
    dispName: string;
}


/**
 * @export
 */
export const ParamType1ItemInputTypeEnum = {
    Type1: 'type1'
} as const;
export type ParamType1ItemInputTypeEnum = typeof ParamType1ItemInputTypeEnum[keyof typeof ParamType1ItemInputTypeEnum];


/**
 * Check if a given object implements the ParamType1ItemInput interface.
 */
export function instanceOfParamType1ItemInput(value: object): value is ParamType1ItemInput {
    if (!('sortOrder' in value) || value['sortOrder'] === undefined) return false;
    if (!('type' in value) || value['type'] === undefined) return false;
    if (!('code' in value) || value['code'] === undefined) return false;
    if (!('dispName' in value) || value['dispName'] === undefined) return false;
    return true;
}

export function ParamType1ItemInputFromJSON(json: any): ParamType1ItemInput {
    return ParamType1ItemInputFromJSONTyped(json, false);
}

export function ParamType1ItemInputFromJSONTyped(json: any, ignoreDiscriminator: boolean): ParamType1ItemInput {
    if (json == null) {
        return json;
    }
    return {
        
        'sortOrder': json['sortOrder'],
        'type': json['type'],
        'code': json['code'],
        'dispName': json['dispName'],
    };
}

export function ParamType1ItemInputToJSON(json: any): ParamType1ItemInput {
    return ParamType1ItemInputToJSONTyped(json, false);
}

export function ParamType1ItemInputToJSONTyped(value?: ParamType1ItemInput | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'sortOrder': value['sortOrder'],
        'type': value['type'],
        'code': value['code'],
        'dispName': value['dispName'],
    };
}

