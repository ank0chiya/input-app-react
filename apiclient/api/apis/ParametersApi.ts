/* tslint:disable */
/* eslint-disable */
/**
 * Sample Product API
 * API for managing products and attributes. Params are managed via dedicated endpoints. Attribute creation/update does not include params list directly. \'param\' field in Attribute renamed to \'params\'. Corrected tags for DELETE methods.
 *
 * The version of the OpenAPI document: v1.2.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  ParamItem,
  ParamItemInput,
} from '../models/index';
import {
    ParamItemFromJSON,
    ParamItemToJSON,
    ParamItemInputFromJSON,
    ParamItemInputToJSON,
} from '../models/index';

export interface AddParamRequest {
    productId: number;
    attributeId: number;
    paramItemInput: ParamItemInput;
}

export interface DeleteParamRequest {
    productId: number;
    attributeId: number;
    paramId: number;
}

export interface UpdateParamRequest {
    productId: number;
    attributeId: number;
    paramId: number;
    paramItemInput: ParamItemInput;
}

/**
 * 
 */
export class ParametersApi extends runtime.BaseAPI {

    /**
     * Add a new parameter to a specific attribute
     */
    async addParamRaw(requestParameters: AddParamRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ParamItem>> {
        if (requestParameters['productId'] == null) {
            throw new runtime.RequiredError(
                'productId',
                'Required parameter "productId" was null or undefined when calling addParam().'
            );
        }

        if (requestParameters['attributeId'] == null) {
            throw new runtime.RequiredError(
                'attributeId',
                'Required parameter "attributeId" was null or undefined when calling addParam().'
            );
        }

        if (requestParameters['paramItemInput'] == null) {
            throw new runtime.RequiredError(
                'paramItemInput',
                'Required parameter "paramItemInput" was null or undefined when calling addParam().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/products/{productId}/attributes/{attributeId}/params`.replace(`{${"productId"}}`, encodeURIComponent(String(requestParameters['productId']))).replace(`{${"attributeId"}}`, encodeURIComponent(String(requestParameters['attributeId']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ParamItemInputToJSON(requestParameters['paramItemInput']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ParamItemFromJSON(jsonValue));
    }

    /**
     * Add a new parameter to a specific attribute
     */
    async addParam(requestParameters: AddParamRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ParamItem> {
        const response = await this.addParamRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Delete a specific parameter from an attribute
     */
    async deleteParamRaw(requestParameters: DeleteParamRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['productId'] == null) {
            throw new runtime.RequiredError(
                'productId',
                'Required parameter "productId" was null or undefined when calling deleteParam().'
            );
        }

        if (requestParameters['attributeId'] == null) {
            throw new runtime.RequiredError(
                'attributeId',
                'Required parameter "attributeId" was null or undefined when calling deleteParam().'
            );
        }

        if (requestParameters['paramId'] == null) {
            throw new runtime.RequiredError(
                'paramId',
                'Required parameter "paramId" was null or undefined when calling deleteParam().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/products/{productId}/attributes/{attributeId}/params/{paramId}`.replace(`{${"productId"}}`, encodeURIComponent(String(requestParameters['productId']))).replace(`{${"attributeId"}}`, encodeURIComponent(String(requestParameters['attributeId']))).replace(`{${"paramId"}}`, encodeURIComponent(String(requestParameters['paramId']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Delete a specific parameter from an attribute
     */
    async deleteParam(requestParameters: DeleteParamRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteParamRaw(requestParameters, initOverrides);
    }

    /**
     * Update an existing parameter of a specific attribute
     */
    async updateParamRaw(requestParameters: UpdateParamRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ParamItem>> {
        if (requestParameters['productId'] == null) {
            throw new runtime.RequiredError(
                'productId',
                'Required parameter "productId" was null or undefined when calling updateParam().'
            );
        }

        if (requestParameters['attributeId'] == null) {
            throw new runtime.RequiredError(
                'attributeId',
                'Required parameter "attributeId" was null or undefined when calling updateParam().'
            );
        }

        if (requestParameters['paramId'] == null) {
            throw new runtime.RequiredError(
                'paramId',
                'Required parameter "paramId" was null or undefined when calling updateParam().'
            );
        }

        if (requestParameters['paramItemInput'] == null) {
            throw new runtime.RequiredError(
                'paramItemInput',
                'Required parameter "paramItemInput" was null or undefined when calling updateParam().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/products/{productId}/attributes/{attributeId}/params/{paramId}`.replace(`{${"productId"}}`, encodeURIComponent(String(requestParameters['productId']))).replace(`{${"attributeId"}}`, encodeURIComponent(String(requestParameters['attributeId']))).replace(`{${"paramId"}}`, encodeURIComponent(String(requestParameters['paramId']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: ParamItemInputToJSON(requestParameters['paramItemInput']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ParamItemFromJSON(jsonValue));
    }

    /**
     * Update an existing parameter of a specific attribute
     */
    async updateParam(requestParameters: UpdateParamRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ParamItem> {
        const response = await this.updateParamRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
