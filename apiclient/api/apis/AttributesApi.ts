/* tslint:disable */
/* eslint-disable */
/**
 * Sample Product API
 * API for managing products and attributes. Params are managed via dedicated endpoints. Attribute creation/update does not include params list directly. \'param\' field in Attribute renamed to \'params\'. Corrected tags for DELETE methods.
 *
 * The version of the OpenAPI document: v1.2.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  Attribute,
  AttributeInput,
} from '../models/index';
import {
    AttributeFromJSON,
    AttributeToJSON,
    AttributeInputFromJSON,
    AttributeInputToJSON,
} from '../models/index';

export interface AddAttributeRequest {
    productId: number;
    attributeInput: AttributeInput;
}

export interface DeleteAttributeRequest {
    productId: number;
    attributeId: number;
}

export interface UpdateAttributeRequest {
    productId: number;
    attributeId: number;
    attributeInput: AttributeInput;
}

/**
 * 
 */
export class AttributesApi extends runtime.BaseAPI {

    /**
     * Add a new attribute to a specific product (without params)
     */
    async addAttributeRaw(requestParameters: AddAttributeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Attribute>> {
        if (requestParameters['productId'] == null) {
            throw new runtime.RequiredError(
                'productId',
                'Required parameter "productId" was null or undefined when calling addAttribute().'
            );
        }

        if (requestParameters['attributeInput'] == null) {
            throw new runtime.RequiredError(
                'attributeInput',
                'Required parameter "attributeInput" was null or undefined when calling addAttribute().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/products/{productId}/attributes`.replace(`{${"productId"}}`, encodeURIComponent(String(requestParameters['productId']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: AttributeInputToJSON(requestParameters['attributeInput']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AttributeFromJSON(jsonValue));
    }

    /**
     * Add a new attribute to a specific product (without params)
     */
    async addAttribute(requestParameters: AddAttributeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Attribute> {
        const response = await this.addAttributeRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Delete a specific attribute from a product
     */
    async deleteAttributeRaw(requestParameters: DeleteAttributeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['productId'] == null) {
            throw new runtime.RequiredError(
                'productId',
                'Required parameter "productId" was null or undefined when calling deleteAttribute().'
            );
        }

        if (requestParameters['attributeId'] == null) {
            throw new runtime.RequiredError(
                'attributeId',
                'Required parameter "attributeId" was null or undefined when calling deleteAttribute().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/products/{productId}/attributes/{attributeId}`.replace(`{${"productId"}}`, encodeURIComponent(String(requestParameters['productId']))).replace(`{${"attributeId"}}`, encodeURIComponent(String(requestParameters['attributeId']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Delete a specific attribute from a product
     */
    async deleteAttribute(requestParameters: DeleteAttributeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteAttributeRaw(requestParameters, initOverrides);
    }

    /**
     * Update an existing attribute of a specific product (without managing params list directly)
     */
    async updateAttributeRaw(requestParameters: UpdateAttributeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Attribute>> {
        if (requestParameters['productId'] == null) {
            throw new runtime.RequiredError(
                'productId',
                'Required parameter "productId" was null or undefined when calling updateAttribute().'
            );
        }

        if (requestParameters['attributeId'] == null) {
            throw new runtime.RequiredError(
                'attributeId',
                'Required parameter "attributeId" was null or undefined when calling updateAttribute().'
            );
        }

        if (requestParameters['attributeInput'] == null) {
            throw new runtime.RequiredError(
                'attributeInput',
                'Required parameter "attributeInput" was null or undefined when calling updateAttribute().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/products/{productId}/attributes/{attributeId}`.replace(`{${"productId"}}`, encodeURIComponent(String(requestParameters['productId']))).replace(`{${"attributeId"}}`, encodeURIComponent(String(requestParameters['attributeId']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: AttributeInputToJSON(requestParameters['attributeInput']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AttributeFromJSON(jsonValue));
    }

    /**
     * Update an existing attribute of a specific product (without managing params list directly)
     */
    async updateAttribute(requestParameters: UpdateAttributeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Attribute> {
        const response = await this.updateAttributeRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
